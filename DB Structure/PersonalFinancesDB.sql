
--
-- Table structure for table `EXPENSES`
--

CREATE TABLE `EXPENSES` (
  `EXPENSE_ID` int(11) NOT NULL,
  `EXPENSES_SUM_ID` int(11) NOT NULL,
  `EXPENSE` varchar(250) NOT NULL,
  `EXP_CATEGORY_ID` int(11) NOT NULL,
  `AMOUNT_ALL` double(10,2) NOT NULL DEFAULT 0.00,
  `AMOUNT_PAYED` double(10,2) NOT NULL DEFAULT 0.00,
  `AMOUNT_OPEN` double(10,2) NOT NULL DEFAULT 0.00,
  `REGULAR_EXPENSE_ID` int(11) DEFAULT NULL,
  `UPDATE_REGULAR_EXPENSE` tinyint(1) DEFAULT 0,
  `NOTES` varchar(500) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

--
-- Triggers `EXPENSES`
--
DELIMITER $$
CREATE TRIGGER `expense_sum_amount` AFTER UPDATE ON `EXPENSES` FOR EACH ROW UPDATE EXPENSES_SUM SET exp_all_sum = (SELECT sum(amount_all) FROM EXPENSES WHERE EXPENSES_SUM_ID = old.EXPENSES_SUM_ID), exp_payed_sum = (SELECT sum(amount_payed) FROM EXPENSES WHERE EXPENSES_SUM_ID = old.EXPENSES_SUM_ID), exp_open_sum = (SELECT sum(amount_open) FROM EXPENSES WHERE EXPENSES_SUM_ID = old.EXPENSES_SUM_ID) WHERE EXPENSES_SUM.EXPENSES_SUM_ID = old.EXPENSES_SUM_ID
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `expense_sum_delete` AFTER DELETE ON `EXPENSES` FOR EACH ROW UPDATE EXPENSES_SUM SET exp_all_sum = (SELECT sum(amount_all) FROM EXPENSES WHERE EXPENSES_SUM_ID = old.EXPENSES_SUM_ID), exp_payed_sum = (SELECT sum(amount_payed) FROM EXPENSES WHERE EXPENSES_SUM_ID = old.EXPENSES_SUM_ID), exp_open_sum = (SELECT sum(amount_open) FROM EXPENSES WHERE EXPENSES_SUM_ID = old.EXPENSES_SUM_ID) WHERE EXPENSES_SUM.EXPENSES_SUM_ID = old.EXPENSES_SUM_ID
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `expense_sum_insert` AFTER INSERT ON `EXPENSES` FOR EACH ROW UPDATE EXPENSES_SUM SET exp_all_sum = exp_all_sum + new.AMOUNT_ALL, exp_open_sum = exp_open_sum + new.AMOUNT_ALL WHERE EXPENSES_SUM.EXPENSES_SUM_ID = new.EXPENSES_SUM_ID
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `EXPENSES_SUM`
--

CREATE TABLE `EXPENSES_SUM` (
  `EXPENSES_SUM_ID` int(11) NOT NULL,
  `YEAR` int(11) DEFAULT NULL,
  `MONTH` int(11) DEFAULT NULL,
  `EXP_ALL_SUM` double(10,2) DEFAULT 0.00,
  `EXP_PAYED_SUM` double(10,2) DEFAULT 0.00,
  `EXP_OPEN_SUM` double(10,2) DEFAULT 0.00,
  `CLOSED` tinyint(1) DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

-- --------------------------------------------------------

--
-- Table structure for table `INCOMES`
--

CREATE TABLE `INCOMES` (
  `INCOME_ID` int(11) NOT NULL,
  `INCOMES_SUM_ID` int(11) NOT NULL,
  `INC_CATEGORY_ID` int(11) NOT NULL,
  `INCOME` varchar(250) NOT NULL,
  `NOTES` varchar(250) DEFAULT NULL,
  `AMOUNT_ALL` double(10,2) NOT NULL DEFAULT 0.00,
  `AMOUNT_RECEIVED` double(10,2) NOT NULL DEFAULT 0.00,
  `AMOUNT_OPEN` double(10,2) NOT NULL DEFAULT 0.00,
  `REGULAR_INCOME_ID` int(11) DEFAULT NULL,
  `UPDATE_REGULAR_INCOME` tinyint(1) DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

--
-- Triggers `INCOMES`
--
DELIMITER $$
CREATE TRIGGER `income_sum_amount` AFTER UPDATE ON `INCOMES` FOR EACH ROW UPDATE INCOMES_SUM SET inc_all_sum = (SELECT sum(amount_all) FROM INCOMES WHERE INCOMES_SUM_ID = old.INCOMES_SUM_ID), inc_received_sum = (SELECT sum(amount_received) FROM INCOMES WHERE INCOMES_SUM_ID = old.INCOMES_SUM_ID), inc_open_sum = (SELECT sum(amount_open) FROM INCOMES WHERE INCOMES_SUM_ID = old.INCOMES_SUM_ID) WHERE INCOMES_SUM.INCOMES_SUM_ID = old.INCOMES_SUM_ID
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `income_sum_delete` AFTER DELETE ON `INCOMES` FOR EACH ROW UPDATE INCOMES_SUM SET inc_all_sum = (SELECT sum(amount_all) FROM INCOMES WHERE INCOMES_SUM_ID = old.INCOMES_SUM_ID), inc_received_sum = (SELECT sum(amount_received) FROM INCOMES WHERE INCOMES_SUM_ID = old.INCOMES_SUM_ID), inc_open_sum = (SELECT sum(amount_open) FROM INCOMES WHERE INCOMES_SUM_ID = old.INCOMES_SUM_ID) WHERE INCOMES_SUM.INCOMES_SUM_ID = old.INCOMES_SUM_ID
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `update_incomes_sum` AFTER INSERT ON `INCOMES` FOR EACH ROW UPDATE INCOMES_SUM SET inc_all_sum = inc_all_sum + new.AMOUNT_ALL, inc_open_sum = inc_open_sum + new.AMOUNT_ALL WHERE INCOMES_SUM.INCOMES_SUM_ID = new.INCOMES_SUM_ID
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `INCOMES_SUM`
--

CREATE TABLE `INCOMES_SUM` (
  `INCOMES_SUM_ID` int(11) NOT NULL,
  `YEAR` int(11) DEFAULT NULL,
  `MONTH` int(11) DEFAULT NULL,
  `INC_ALL_SUM` double(10,2) DEFAULT 0.00,
  `INC_RECEIVED_SUM` double(10,2) DEFAULT 0.00,
  `INC_OPEN_SUM` double(10,2) DEFAULT 0.00,
  `CLOSED` tinyint(1) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

-- --------------------------------------------------------

--
-- Table structure for table `MONEY_ALLOCATION`
--

CREATE TABLE `MONEY_ALLOCATION` (
  `ALLOC_ID` int(11) NOT NULL,
  `ALLOCATION` varchar(250) NOT NULL,
  `ALLOC_AMOUNT` double(10,2) NOT NULL DEFAULT 0.00,
  `ALLOC_DESC` varchar(250) DEFAULT NULL,
  `CURR_ID` int(11) NOT NULL,
  `VALUE` double(10,2) DEFAULT NULL,
  `AVAILABLE` tinyint(1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

--
-- Triggers `MONEY_ALLOCATION`
--
DELIMITER $$
CREATE TRIGGER `update_value` BEFORE UPDATE ON `MONEY_ALLOCATION` FOR EACH ROW BEGIN
IF OLD.CURR_ID <> NEW.CURR_ID THEN
SET NEW.VALUE = (SELECT round(OLD.ALLOC_AMOUNT / CURR_RATE, 2) FROM REG_CURRENCY WHERE CURR_ID = NEW.CURR_ID);
ELSEIF OLD.ALLOC_AMOUNT <> NEW.ALLOC_AMOUNT THEN
SET NEW.VALUE = (SELECT round(NEW.ALLOC_AMOUNT / CURR_RATE, 2) FROM REG_CURRENCY WHERE CURR_ID = NEW.CURR_ID);
END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `MONEY_CORRECTION`
--

CREATE TABLE `MONEY_CORRECTION` (
  `MONEY_CORRECTION_ID` int(11) NOT NULL,
  `YEAR` int(11) NOT NULL,
  `MONTH` int(11) NOT NULL,
  `AMOUNT` double(10,2) NOT NULL DEFAULT 0.00,
  `NOTES` varchar(250) CHARACTER SET utf8 COLLATE utf8_slovenian_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- --------------------------------------------------------

--
-- Table structure for table `REG_CURRENCY`
--

CREATE TABLE `REG_CURRENCY` (
  `CURR_ID` int(11) NOT NULL,
  `CURR_CODE` varchar(250) NOT NULL,
  `CURR_NAME` varchar(250) NOT NULL,
  `CURR_RATE` double(10,4) NOT NULL DEFAULT 1.0000,
  `RATE_DATE` date NOT NULL,
  `CRYPTO` tinyint(1) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

--
-- Triggers `REG_CURRENCY`
--
DELIMITER $$
CREATE TRIGGER `update_money_alloc` AFTER UPDATE ON `REG_CURRENCY` FOR EACH ROW UPDATE MONEY_ALLOCATION SET VALUE = ALLOC_AMOUNT / NEW.CURR_RATE 
WHERE CURR_ID = OLD.CURR_ID
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `REG_EXPENSE_CATEGORIES`
--

CREATE TABLE `REG_EXPENSE_CATEGORIES` (
  `EXP_CATEGORY_ID` int(11) NOT NULL,
  `EXP_CATEGORY` varchar(250) NOT NULL,
  `EXP_CAT_DESC` varchar(250) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

-- --------------------------------------------------------

--
-- Table structure for table `REG_INCOME_CATEGORIES`
--

CREATE TABLE `REG_INCOME_CATEGORIES` (
  `INC_CATEGORY_ID` int(11) NOT NULL,
  `INC_CATEGORY` varchar(250) DEFAULT NULL,
  `INC_CAT_DESC` varchar(250) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

-- --------------------------------------------------------

--
-- Table structure for table `REG_REGULAR_EXPENSES`
--

CREATE TABLE `REG_REGULAR_EXPENSES` (
  `REGULAR_EXPENSE_ID` int(11) NOT NULL,
  `EXP_CATEGORY_ID` int(11) NOT NULL,
  `REGULAR_EXPENSE` varchar(250) NOT NULL,
  `AMOUNT` double(10,2) NOT NULL DEFAULT 0.00,
  `MONTHS` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

--
-- Triggers `REG_REGULAR_EXPENSES`
--
DELIMITER $$
CREATE TRIGGER `insert_expenses` AFTER INSERT ON `REG_REGULAR_EXPENSES` FOR EACH ROW BEGIN
DECLARE i INT;
DECLARE monthsChar VARCHAR(100);
DECLARE monthVal VARCHAR(2);
DECLARE numberOfMonths INT;

IF new.MONTHS <> '' THEN

SET monthsChar = REPLACE(new.MONTHS, ' ', '');
SET numberOfMonths = (LENGTH(monthsChar) - LENGTH(REPLACE(monthsChar, ',', ''))) + 1;


SET i = 1;
loop1:  LOOP
        IF  i > numberOfMonths THEN 
            LEAVE  loop1;
        END  IF;

SET monthVal = SUBSTRING_INDEX(SUBSTRING_INDEX(monthsChar, ',', i), ',', -1);
        
UPDATE EXPENSES_SUM SET exp_all_sum = exp_all_sum + new.AMOUNT, exp_open_sum = exp_open_sum + new.AMOUNT WHERE MONTH = monthVal AND CLOSED = 0;
        

DROP TEMPORARY TABLE IF EXISTS temp_expense_id;
        
CREATE TEMPORARY TABLE IF NOT EXISTS temp_expense_id
select EXPENSES_SUM_ID FROM EXPENSES_SUM WHERE MONTH = monthVal AND CLOSED = 0;


INSERT INTO EXPENSES (EXPENSES_SUM_ID, EXP_CATEGORY_ID, EXPENSE, AMOUNT_ALL, AMOUNT_PAYED, AMOUNT_OPEN, REGULAR_EXPENSE_ID, UPDATE_REGULAR_EXPENSE) 
select EXPENSES_SUM_ID, new.EXP_CATEGORY_ID, new.REGULAR_EXPENSE, new.AMOUNT, 0.0, new.AMOUNT, new.REGULAR_EXPENSE_ID, 1 FROM temp_expense_id;

SET i = i + 1;       
END LOOP;

ELSE
UPDATE EXPENSES_SUM SET exp_all_sum = exp_all_sum + new.AMOUNT, exp_open_sum = exp_open_sum + new.AMOUNT WHERE CLOSED = 0;

DROP TEMPORARY TABLE IF EXISTS temp_expense_id;
        
CREATE TEMPORARY TABLE IF NOT EXISTS temp_expense_id
select EXPENSES_SUM_ID FROM EXPENSES_SUM WHERE CLOSED = 0;


INSERT INTO EXPENSES (EXPENSES_SUM_ID, EXP_CATEGORY_ID, EXPENSE, AMOUNT_ALL, AMOUNT_PAYED, AMOUNT_OPEN, REGULAR_EXPENSE_ID, UPDATE_REGULAR_EXPENSE) 
select EXPENSES_SUM_ID, new.EXP_CATEGORY_ID, new.REGULAR_EXPENSE, new.AMOUNT, 0.0, new.AMOUNT, new.REGULAR_EXPENSE_ID, 1 FROM temp_expense_id;

END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `update_expenses` BEFORE UPDATE ON `REG_REGULAR_EXPENSES` FOR EACH ROW BEGIN
DECLARE i INT;
DECLARE monthsChar VARCHAR(100);
DECLARE monthVal VARCHAR(2);
DECLARE numberOfMonths INT;

IF OLD.months <> NEW.months THEN

DROP TEMPORARY TABLE IF EXISTS temp_expense_id;

CREATE TEMPORARY TABLE IF NOT EXISTS temp_expense_id
select E.EXPENSE_ID from EXPENSES_SUM EXP, EXPENSES E WHERE EXP.EXPENSES_SUM_ID = E.EXPENSES_SUM_ID AND EXP.CLOSED = 0 AND E.UPDATE_REGULAR_EXPENSE IN (1, 2) AND E.AMOUNT_PAYED = 0 AND E.regular_expense_id = old.regular_expense_id;

DELETE FROM EXPENSES WHERE EXPENSE_ID IN (select EXPENSE_ID from temp_expense_id);



IF new.MONTHS IS NOT NULL THEN

SET monthsChar = REPLACE(new.MONTHS, ' ', '');
SET numberOfMonths = (LENGTH(monthsChar) - LENGTH(REPLACE(monthsChar, ',', ''))) + 1;


SET i = 1;
loop1:  LOOP
        IF  i > numberOfMonths THEN 
            LEAVE  loop1;
        END  IF;

SET monthVal = SUBSTRING_INDEX(SUBSTRING_INDEX(monthsChar, ',', i), ',', -1);
        
UPDATE EXPENSES_SUM SET exp_all_sum = exp_all_sum + new.AMOUNT, exp_open_sum = exp_open_sum + new.AMOUNT WHERE MONTH = monthVal AND CLOSED = 0;
        

DROP TEMPORARY TABLE IF EXISTS temp_expense_id;
        
CREATE TEMPORARY TABLE IF NOT EXISTS temp_expense_id
select EXPENSES_SUM_ID FROM EXPENSES_SUM WHERE MONTH = monthVal AND CLOSED = 0;


INSERT INTO EXPENSES (EXPENSES_SUM_ID, EXP_CATEGORY_ID, EXPENSE, AMOUNT_ALL, AMOUNT_PAYED, AMOUNT_OPEN, REGULAR_EXPENSE_ID, UPDATE_REGULAR_EXPENSE) 
select EXPENSES_SUM_ID, new.EXP_CATEGORY_ID, new.REGULAR_EXPENSE, new.AMOUNT, 0.0, new.AMOUNT, old.REGULAR_EXPENSE_ID, 1 FROM temp_expense_id;

SET i = i + 1;       
END LOOP;
END IF;

ELSEIF OLD.regular_expense <> NEW.regular_expense 
OR  OLD.exp_category_id <> NEW.exp_category_id 
THEN

DROP TEMPORARY TABLE IF EXISTS temp_expense_id;
        
CREATE TEMPORARY TABLE IF NOT EXISTS temp_expense_id
select EXPENSE_ID from EXPENSES_SUM EXP, EXPENSES E WHERE EXP.EXPENSES_SUM_ID = E.EXPENSES_SUM_ID AND E.REGULAR_EXPENSE_ID = OLD.REGULAR_EXPENSE_ID;

UPDATE EXPENSES 
SET expense = new.regular_expense,
		exp_category_id = new.exp_category_id
        WHERE regular_expense_id = old.regular_expense_id
        AND EXPENSE_ID in (select EXPENSE_ID from temp_expense_id);
END IF;
    

DROP TEMPORARY TABLE IF EXISTS temp_expense_id;

CREATE TEMPORARY TABLE IF NOT EXISTS temp_expense_id
select EXPENSE_ID from EXPENSES_SUM EXP, EXPENSES E WHERE EXP.EXPENSES_SUM_ID = E.EXPENSES_SUM_ID AND EXP.CLOSED = 0 AND E.UPDATE_REGULAR_EXPENSE IN (1, 2);

UPDATE EXPENSES 
SET amount_all = new.amount, 
        amount_open =  new.amount - amount_payed
        WHERE regular_expense_id = old.regular_expense_id
		AND EXPENSE_ID IN (select EXPENSE_ID from temp_expense_id);

END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `REG_REGULAR_INCOMES`
--

CREATE TABLE `REG_REGULAR_INCOMES` (
  `REGULAR_INCOME_ID` int(11) NOT NULL,
  `INC_CATEGORY_ID` int(11) NOT NULL,
  `REGULAR_INCOME` varchar(250) NOT NULL,
  `AMOUNT` decimal(10,2) NOT NULL DEFAULT 0.00
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

--
-- Triggers `REG_REGULAR_INCOMES`
--
DELIMITER $$
CREATE TRIGGER `insert_reg_incomes` AFTER INSERT ON `REG_REGULAR_INCOMES` FOR EACH ROW BEGIN
UPDATE INCOMES_SUM SET inc_all_sum = inc_all_sum + new.AMOUNT, inc_open_sum = inc_open_sum + new.AMOUNT WHERE CLOSED = 0;

DROP TEMPORARY TABLE IF EXISTS temp_incomes_sum;

CREATE TEMPORARY TABLE IF NOT EXISTS temp_income_id
SELECT INCOMES_SUM_ID FROM INCOMES_SUM WHERE CLOSED = 0;

INSERT INTO INCOMES (INCOMES_SUM_ID, INC_CATEGORY_ID, INCOME, AMOUNT_ALL, AMOUNT_RECEIVED, AMOUNT_OPEN, REGULAR_INCOME_ID, UPDATE_REGULAR_INCOME) 
select INCOMES_SUM_ID, new.INC_CATEGORY_ID, new.REGULAR_INCOME, new.AMOUNT, 0.0, new.AMOUNT, new.REGULAR_INCOME_ID, 1 FROM temp_income_id;

END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `update_reg_incomes` BEFORE UPDATE ON `REG_REGULAR_INCOMES` FOR EACH ROW BEGIN 
DROP TEMPORARY TABLE IF EXISTS temp_income_id;


    IF OLD.regular_income <> NEW.regular_income THEN
        CREATE TEMPORARY TABLE IF NOT EXISTS temp_income_id
        SELECT INCOME_ID from INCOMES_SUM INS, INCOMES I WHERE INS.INCOMES_SUM_ID = I.INCOMES_SUM_ID AND I.REGULAR_INCOME_ID = OLD.REGULAR_INCOME_ID;

        UPDATE INCOMES SET income = new.REGULAR_INCOME
        WHERE regular_income_id = old.regular_income_id
        AND INCOME_ID IN (select INCOME_ID from temp_income_id);
    END IF;

DROP TEMPORARY TABLE IF EXISTS temp_income_id;

        CREATE TEMPORARY TABLE IF NOT EXISTS temp_income_id
        SELECT INCOME_ID from INCOMES_SUM INS, INCOMES I WHERE INS.INCOMES_SUM_ID = I.INCOMES_SUM_ID AND INS.CLOSED = 0 AND I.UPDATE_REGULAR_INCOME IN (1, 2);

        UPDATE INCOMES SET inc_category_id = new.inc_category_id, 
        amount_all = new.amount, 
        amount_open =  new.amount - amount_received
        WHERE regular_income_id = old.regular_income_id
        AND INCOME_ID IN (select INCOME_ID from temp_income_id);
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `REG_SYS_VARIABLES`
--

CREATE TABLE `REG_SYS_VARIABLES` (
  `CURRENCY_CHECK_SUM` double(10,2) NOT NULL,
  `PRE_APP_CASH` double(10,2) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_slovenian_ci;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `EXPENSES`
--
ALTER TABLE `EXPENSES`
  ADD PRIMARY KEY (`EXPENSE_ID`,`EXPENSES_SUM_ID`) USING BTREE,
  ADD KEY `EXP_CATEGORY_ID` (`EXP_CATEGORY_ID`),
  ADD KEY `REGULAR_EXPENSE_ID` (`REGULAR_EXPENSE_ID`),
  ADD KEY `EXPENSES_SUM_ID` (`EXPENSES_SUM_ID`);

--
-- Indexes for table `EXPENSES_SUM`
--
ALTER TABLE `EXPENSES_SUM`
  ADD PRIMARY KEY (`EXPENSES_SUM_ID`),
  ADD UNIQUE KEY `YEAR` (`YEAR`,`MONTH`);

--
-- Indexes for table `INCOMES`
--
ALTER TABLE `INCOMES`
  ADD PRIMARY KEY (`INCOME_ID`),
  ADD KEY `INC_CATEGORY_ID` (`INC_CATEGORY_ID`),
  ADD KEY `REGULAR_INCOME_ID` (`REGULAR_INCOME_ID`),
  ADD KEY `INCOMES_SUM_ID` (`INCOMES_SUM_ID`);

--
-- Indexes for table `INCOMES_SUM`
--
ALTER TABLE `INCOMES_SUM`
  ADD PRIMARY KEY (`INCOMES_SUM_ID`),
  ADD UNIQUE KEY `YEAR` (`YEAR`,`MONTH`);

--
-- Indexes for table `MONEY_ALLOCATION`
--
ALTER TABLE `MONEY_ALLOCATION`
  ADD PRIMARY KEY (`ALLOC_ID`),
  ADD UNIQUE KEY `ALLOCATION` (`ALLOCATION`),
  ADD KEY `CURR_ID` (`CURR_ID`);

--
-- Indexes for table `MONEY_CORRECTION`
--
ALTER TABLE `MONEY_CORRECTION`
  ADD PRIMARY KEY (`MONEY_CORRECTION_ID`),
  ADD UNIQUE KEY `UK_YEAR_MONTH` (`YEAR`,`MONTH`);

--
-- Indexes for table `REG_CURRENCY`
--
ALTER TABLE `REG_CURRENCY`
  ADD PRIMARY KEY (`CURR_ID`),
  ADD UNIQUE KEY `CURR_CODE` (`CURR_CODE`);

--
-- Indexes for table `REG_EXPENSE_CATEGORIES`
--
ALTER TABLE `REG_EXPENSE_CATEGORIES`
  ADD PRIMARY KEY (`EXP_CATEGORY_ID`),
  ADD UNIQUE KEY `EXP_CATEGORY` (`EXP_CATEGORY`);

--
-- Indexes for table `REG_INCOME_CATEGORIES`
--
ALTER TABLE `REG_INCOME_CATEGORIES`
  ADD PRIMARY KEY (`INC_CATEGORY_ID`),
  ADD UNIQUE KEY `INC_CATEGORY` (`INC_CATEGORY`);

--
-- Indexes for table `REG_REGULAR_EXPENSES`
--
ALTER TABLE `REG_REGULAR_EXPENSES`
  ADD PRIMARY KEY (`REGULAR_EXPENSE_ID`),
  ADD KEY `EXP_CATEGORY_ID` (`EXP_CATEGORY_ID`);

--
-- Indexes for table `REG_REGULAR_INCOMES`
--
ALTER TABLE `REG_REGULAR_INCOMES`
  ADD PRIMARY KEY (`REGULAR_INCOME_ID`),
  ADD KEY `INC_CATEGORY_ID` (`INC_CATEGORY_ID`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `EXPENSES`
--
ALTER TABLE `EXPENSES`
  MODIFY `EXPENSE_ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `EXPENSES_SUM`
--
ALTER TABLE `EXPENSES_SUM`
  MODIFY `EXPENSES_SUM_ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `INCOMES`
--
ALTER TABLE `INCOMES`
  MODIFY `INCOME_ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `INCOMES_SUM`
--
ALTER TABLE `INCOMES_SUM`
  MODIFY `INCOMES_SUM_ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `MONEY_CORRECTION`
--
ALTER TABLE `MONEY_CORRECTION`
  MODIFY `MONEY_CORRECTION_ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `REG_EXPENSE_CATEGORIES`
--
ALTER TABLE `REG_EXPENSE_CATEGORIES`
  MODIFY `EXP_CATEGORY_ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `REG_INCOME_CATEGORIES`
--
ALTER TABLE `REG_INCOME_CATEGORIES`
  MODIFY `INC_CATEGORY_ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `REG_REGULAR_EXPENSES`
--
ALTER TABLE `REG_REGULAR_EXPENSES`
  MODIFY `REGULAR_EXPENSE_ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `REG_REGULAR_INCOMES`
--
ALTER TABLE `REG_REGULAR_INCOMES`
  MODIFY `REGULAR_INCOME_ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `EXPENSES`
--
ALTER TABLE `EXPENSES`
  ADD CONSTRAINT `EXPENSES_ibfk_1` FOREIGN KEY (`EXP_CATEGORY_ID`) REFERENCES `REG_EXPENSE_CATEGORIES` (`EXP_CATEGORY_ID`),
  ADD CONSTRAINT `EXPENSES_ibfk_3` FOREIGN KEY (`REGULAR_EXPENSE_ID`) REFERENCES `REG_REGULAR_EXPENSES` (`REGULAR_EXPENSE_ID`),
  ADD CONSTRAINT `EXPENSES_ibfk_4` FOREIGN KEY (`EXPENSES_SUM_ID`) REFERENCES `EXPENSES_SUM` (`EXPENSES_SUM_ID`);

--
-- Constraints for table `INCOMES`
--
ALTER TABLE `INCOMES`
  ADD CONSTRAINT `INCOMES_ibfk_1` FOREIGN KEY (`INC_CATEGORY_ID`) REFERENCES `REG_INCOME_CATEGORIES` (`INC_CATEGORY_ID`),
  ADD CONSTRAINT `INCOMES_ibfk_2` FOREIGN KEY (`REGULAR_INCOME_ID`) REFERENCES `REG_REGULAR_INCOMES` (`REGULAR_INCOME_ID`),
  ADD CONSTRAINT `INCOMES_ibfk_3` FOREIGN KEY (`INCOMES_SUM_ID`) REFERENCES `INCOMES_SUM` (`INCOMES_SUM_ID`);

--
-- Constraints for table `MONEY_ALLOCATION`
--
ALTER TABLE `MONEY_ALLOCATION`
  ADD CONSTRAINT `MONEY_ALLOCATION_ibfk_1` FOREIGN KEY (`CURR_ID`) REFERENCES `REG_CURRENCY` (`CURR_ID`);

--
-- Constraints for table `REG_REGULAR_EXPENSES`
--
ALTER TABLE `REG_REGULAR_EXPENSES`
  ADD CONSTRAINT `REG_REGULAR_EXPENSES_ibfk_1` FOREIGN KEY (`EXP_CATEGORY_ID`) REFERENCES `REG_EXPENSE_CATEGORIES` (`EXP_CATEGORY_ID`);

--
-- Constraints for table `REG_REGULAR_INCOMES`
--
ALTER TABLE `REG_REGULAR_INCOMES`
  ADD CONSTRAINT `REG_REGULAR_INCOMES_ibfk_1` FOREIGN KEY (`INC_CATEGORY_ID`) REFERENCES `REG_INCOME_CATEGORIES` (`INC_CATEGORY_ID`);
COMMIT;

